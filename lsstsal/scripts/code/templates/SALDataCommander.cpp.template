/*
 * This file contains the implementation for the 'SALDataCommander' executable.
 *
 ***/

// Control optional compilation 
#define USE_SAL_WRAPPER
#define USE_SAL_COMMAND

#include <string>
#include <sstream>
#include <iostream>
#include "SAL_SALData.h"
#include "ccpp_sal_SALData.h"
#include "os.h"

#include "example_main.h"

using namespace DDS;
using namespace SALData;

/* entry point exported and demangled so symbol can be found in shared library */
extern "C"
{
  OS_API_EXPORT
  int SALDataCommander(char *device, char *property, char *action, char *itemValue, char *modifiers);
}


int SALDataCommander(unsigned int timeout ,char *device, char *property, char *action, char *itemValue, char *modifiers)
{
  salReturn status = SAL__OK;
  int cmdId;

  os_time delay_1s = { 1, 0 };

  // Initialize
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
  int SALDataID = 1;
  SAL_SALData cmd = SAL_SALData(SALDataID);
//  cmd.salInitialize(SALDataID);
#else
  SAL_SALData cmd = SAL_SALData();
//  cmd.salInitialize();
#endif
  cmd.salCommand();

  SALData::command command; /* Example on Stack */
  command.private_revCode = DDS::string_dup("LSST TEST COMMAND");\
  command.device = DDS::string_dup(device);
  command.property = DDS::string_dup(property);
  command.action = DDS::string_dup(action);
  command.itemValue = DDS::string_dup(itemValue);
  command.modifiers = DDS::string_dup(modifiers);
  cmdId = cmd.issueCommand(command);

  os_nanoSleep(delay_1s);
  status = cmd.waitForCompletion(cmdId, timeout);

  /* Remove the DataWriters etc */
  cmd.salShutdown();

  return status;
}



int OSPL_MAIN (int argc, char *argv[])
{
  unsigned int timeout = 0;

  if (argc > 1) {
     sscanf(argv[1],"%d",&timeout);
  }
  return SALDataCommander (timeout, argv[2], argv[3], argv[4], argv[5], argv[6]);
}


